/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(t_divide, T_DIVIDE);		// divide error
TRAPHANDLER_NOEC(t_debug, T_DEBUG);		// debug exception
TRAPHANDLER_NOEC(t_nmi, T_NMI );		// non-maskable interrupt 
TRAPHANDLER_NOEC(t_brkpt, T_BRKPT );		// breakpoint
TRAPHANDLER_NOEC(t_oflow, T_OFLOW );		// overflow
TRAPHANDLER_NOEC(t_bound, T_BOUND );		// bounds check
TRAPHANDLER_NOEC(t_illop, T_ILLOP );		// illegal opcode
TRAPHANDLER_NOEC(t_device, T_DEVICE );		// device not available
TRAPHANDLER(t_dblflt, T_DBLFLT );		// double fault
TRAPHANDLER_NOEC(t_coproc, T_COPROC );	// -----------reserved (not generated by recent processors)
TRAPHANDLER(t_tss, T_TSS );		// invalid task switch segment
TRAPHANDLER(t_segnp, T_SEGNP );		// segment not present
TRAPHANDLER(t_stack, T_STACK );		// stack exception
TRAPHANDLER(t_gpflt, T_GPFLT );		// general protection fault
TRAPHANDLER(t_pgflt, T_PGFLT );		// page fault
TRAPHANDLER_NOEC(t_res, T_RES ); 	// ------------reserved
TRAPHANDLER_NOEC(t_fperr, T_FPERR );		// floating point error
TRAPHANDLER(t_align, T_ALIGN );		// aligment check
TRAPHANDLER_NOEC(t_mchk, T_MCHK );		// machine check
TRAPHANDLER_NOEC(t_simderr, T_SIMDERR );		// SIMD floating point error

TRAPHANDLER_NOEC(t_syscall, T_SYSCALL );		// system call
TRAPHANDLER_NOEC(t_default, T_DEFAULT );		// catchall


// Hardware IRQ numbers. We receive these as (IRQ_OFFSET+IRQ_WHATEVER):
TRAPHANDLER_NOEC(t_irq_timer,IRQ_TIMER + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_kbd,IRQ_KBD + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_serial,IRQ_SERIAL + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_spurious,IRQ_SPURIOUS + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_ide,IRQ_IDE + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_error,IRQ_ERROR + IRQ_OFFSET);
//Lab6 added interrupts:
TRAPHANDLER_NOEC(t_irq_e1000_rec, IRQ_E1000_REC + IRQ_OFFSET);
TRAPHANDLER_NOEC(t_irq_e1000_trans, IRQ_E1000_TRANS + IRQ_OFFSET);


/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
	pushl %ds
	pushl %es
	pushal
	movl $GD_KD, %eax
	movw %ax, %ds
	movw %ax, %es
	pushl %esp
	call trap	
//should not return here.

