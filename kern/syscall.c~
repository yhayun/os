/* See COPYRIGHT for copyright information. */

#include <inc/x86.h>
#include <inc/error.h>
#include <inc/string.h>
#include <inc/assert.h>
#include <inc/elf.h>

#include <kern/env.h>
#include <kern/pmap.h>
#include <kern/trap.h>
#include <kern/syscall.h>
#include <kern/console.h>
#include <kern/sched.h>
#include <kern/time.h>
#include <kern/e1000.h>

//LAB 5 challenge - also included in user/spawn.c:
#define EXEC_TEMP   (USTACKTOP - (PGSIZE + PTSIZE))

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len , PTE_U);
	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
}

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
	return cons_getc();
}

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{	
	return curenv->env_id;
}

// Destroy a given environment (possibly the currently running environment).
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
		return r;
        if (e == curenv)
                cprintf("[%08x] exiting gracefully\n", curenv->env_id);
        else
                cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
	env_destroy(e);
	return 0;
}

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
	sched_yield();
}

// Allocate a new environment.
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
	// Create the new environment with env_alloc(), from kern/env.c.
	// It should be left as env_alloc created it, except that
	// status is set to ENV_NOT_RUNNABLE, and the register set is copied
	// from the current environment -- but tweaked so sys_exofork
	// will appear to return 0.

	// LAB 4: Your code here.
	struct Env *newenv;
	int res;
	res = env_alloc( &newenv, curenv ? curenv->env_id : 0);
	if (res < 0)
		return res;
	newenv->env_tf = curenv->env_tf;
	newenv->env_type = curenv->env_type;
   	newenv->env_tf.tf_regs.reg_eax = 0;
   	newenv->env_status = ENV_NOT_RUNNABLE;
	//lab 4 - priority challenge addition:
	newenv->env_prio = curenv->env_prio;
   	return newenv->env_id;
}

// Set envid's env_status to status, which must be ENV_RUNNABLE
// or ENV_NOT_RUNNABLE.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
	// Hint: Use the 'envid2env' function from kern/env.c to translate an
	// envid to a struct Env.
	// You should set envid2env's third argument to 1, which will
	// check whether the current environment has permission to set
	// envid's status.

	// LAB 4: Your code here.
	if(! (status == ENV_RUNNABLE || status == ENV_NOT_RUNNABLE))
		return -E_INVAL;
	struct Env* env;
	int res =  envid2env(envid, &env, 1);
	if (res != 0 )
		return res;
	env->env_status = status;
	return 0;
}

// Set envid's trap frame to 'tf'.
// tf is modified to make sure that user environments always run at code
// protection level 3 (CPL 3) with interrupts enabled.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
	// LAB 5: Your code here.
	// Remember to check whether the user has supplied us with a good
	// address!
	struct Env* env;
	int res =  envid2env(envid, &env, 1);
	if (res != 0 )
		return res;

	user_mem_assert(env, tf, sizeof(struct Trapframe), PTE_W);
	tf->tf_eflags |= FL_IF ;
	tf->tf_cs |= 0x3;
	env->env_tf = *tf;

	return 0;
}

// Set the page fault upcall for 'envid' by modifying the corresponding struct
// Env's 'env_pgfault_upcall' field.  When 'envid' causes a page fault, the
// kernel will push a fault record onto the exception stack, then branch to
// 'func'.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
	// LAB 4: Your code here.
	struct Env* env;
	int res =  envid2env(envid, &env, 1);
	if (res != 0 )
		return res;
	env->env_pgfault_upcall = func;
	return 0;
}

// Allocate a page of memory and map it at 'va' with permission
// 'perm' in the address space of 'envid'.
// The page's contents are set to 0.
// If a page is already mapped at 'va', that page is unmapped as a
// side effect.
//
// perm -- PTE_U | PTE_P must be set, PTE_AVAIL | PTE_W may or may not be set,
//         but no other bits may be set.  See PTE_SYSCALL in inc/mmu.h.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
	// Hint: This function is a wrapper around page_alloc() and
	//   page_insert() from kern/pmap.c.
	//   Most of the new code you write should be to check the
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	// LAB 4: Your code here.
	if( !(perm & PTE_U) || (perm & ~(PTE_SYSCALL)) )
		return -E_INVAL;
	if((uint32_t)va >= UTOP || ((uint32_t)va % PGSIZE) )
		return -E_INVAL;
	struct Env* env;
	int res =  envid2env(envid, &env, 1);
	if (res != 0 )
		return res;
	struct PageInfo * pp = page_alloc(ALLOC_ZERO);
	if(!pp)
		return -E_NO_MEM;
	res = page_insert(env->env_pgdir,pp, va, perm|PTE_P );
	if (res !=0 ){
		page_free(pp);
	}
	return res;		
}

// Map the page of memory at 'srcva' in srcenvid's address space
// at 'dstva' in dstenvid's address space with permission 'perm'.
// Perm has the same restrictions as in sys_page_alloc, except
// that it also must not grant write access to a read-only
// page.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if srcenvid and/or dstenvid doesn't currently exist,
//		or the caller doesn't have permission to change one of them.
//	-E_INVAL if srcva >= UTOP or srcva is not page-aligned,
//		or dstva >= UTOP or dstva is not page-aligned.
//	-E_INVAL is srcva is not mapped in srcenvid's address space.
//	-E_INVAL if perm is inappropriate (see sys_page_alloc).
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
	// Hint: This function is a wrapper around page_lookup() and
	//   page_insert() from kern/pmap.c.
	//   Again, most of the new code you write should be to check the
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	if( !(perm & PTE_P) || !(perm & PTE_U) || (perm & ~(PTE_SYSCALL)) )
		return -E_INVAL;
	if((uint32_t)srcva >= UTOP || ((uint32_t)srcva % PGSIZE) || (uint32_t)dstva >= UTOP || ((uint32_t)dstva % PGSIZE))
		return -E_INVAL;
	pte_t *srcpte;
	struct Env *srcenv, *dstenv; 
	int res =  envid2env(srcenvid, &srcenv, 1);
	if (res != 0 )
		return res;
	res =  envid2env(dstenvid, &dstenv, 1);
	if (res != 0 )
		return res;
	struct PageInfo * srcp = page_lookup(srcenv->env_pgdir, srcva, &srcpte);
	if ( ((perm & PTE_W) && !(*srcpte & PTE_W)) || !srcp )
		return -E_INVAL; 
	res = page_insert(dstenv->env_pgdir,srcp, dstva, perm);
	return res;
}

// Unmap the page of memory at 'va' in the address space of 'envid'.
// If no page is mapped, the function silently succeeds.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	if((uint32_t)va >= UTOP || ((uint32_t)va % PGSIZE) )
		return -E_INVAL;
	struct Env* env;
	int res =  envid2env(envid, &env, 1);
	if (res != 0 )
		return res;
	page_remove(env->env_pgdir, va);
	return 0;
}

// Try to send 'value' to the target env 'envid'.
// If srcva < UTOP, then also send page currently mapped at 'srcva',
// so that receiver gets a duplicate mapping of the same page.
//
// The send fails with a return value of -E_IPC_NOT_RECV if the
// target is not blocked, waiting for an IPC.
//
// The send also can fail for the other reasons listed below.
//
// Otherwise, the send succeeds, and the target's ipc fields are
// updated as follows:
//    env_ipc_recving is set to 0 to block future sends;
//    env_ipc_from is set to the sending envid;
//    env_ipc_value is set to the 'value' parameter;
//    env_ipc_perm is set to 'perm' if a page was transferred, 0 otherwise.
// The target environment is marked runnable again, returning 0
// from the paused sys_ipc_recv system call.  (Hint: does the
// sys_ipc_recv function ever actually return?)
//
// If the sender wants to send a page but the receiver isn't asking for one,
// then no page mapping is transferred, but no error occurs.
// The ipc only happens when no errors occur.
//
// Returns 0 on success, < 0 on error.
// Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist.
//		(No need to check permissions.)
//	-E_IPC_NOT_RECV if envid is not currently blocked in sys_ipc_recv,
//		or another environment managed to send first.
//	-E_INVAL if srcva < UTOP but srcva is not page-aligned.
//	-E_INVAL if srcva < UTOP and perm is inappropriate
//		(see sys_page_alloc).
//	-E_INVAL if srcva < UTOP but srcva is not mapped in the caller's
//		address space.
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in the
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
	// LAB 4: Your code here.
	uint32_t res;
	struct Env *target_env;
	struct PageInfo *pp;
	pte_t *pte;

	if ((res = envid2env(envid, &target_env, 0)) != 0)
		return -E_BAD_ENV;
	if (target_env->env_ipc_recving == 0)
		return -E_IPC_NOT_RECV;

	if ((uint32_t) srcva < UTOP && ((uint32_t)target_env->env_ipc_dstva < UTOP)){
		if ( (((uint32_t) srcva % PGSIZE) != 0) || ((perm & PTE_U) != PTE_U) || ((perm & PTE_P) != PTE_P) || ((perm & ~PTE_SYSCALL) != 0))
			return -E_INVAL;

		pp = page_lookup(curenv->env_pgdir, srcva, &pte);
		if (pp == NULL)
			return -E_INVAL;
		if ((perm & PTE_W) && ((*pte & PTE_W) == 0))
			return -E_INVAL;

		res = page_insert(target_env->env_pgdir, pp, target_env->env_ipc_dstva, perm);
		if(res)
			return res;
		target_env->env_ipc_perm = perm;
	}else{
		target_env->env_ipc_perm = 0;
	}

	target_env->env_ipc_recving = false;
	target_env->env_ipc_value = value;
	target_env->env_ipc_from = curenv->env_id;
	target_env->env_status = ENV_RUNNABLE;
	return 0;
}

// Block until a value is ready.  Record that you want to receive
// using the env_ipc_recving and env_ipc_dstva fields of struct Env,
// mark yourself not runnable, and then give up the CPU.
//
// If 'dstva' is < UTOP, then you are willing to receive a page of data.
// 'dstva' is the virtual address at which the sent page should be mapped.
//
// This function only returns on error, but the system call will eventually
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
	// LAB 4: Your code here.
	if( (uint32_t)dstva < UTOP && ((uint32_t)dstva % PGSIZE))
		return -E_INVAL;
	curenv->env_status = ENV_NOT_RUNNABLE;
	curenv->env_ipc_recving = true;
	curenv->env_ipc_dstva = dstva;
	curenv->env_tf.tf_regs.reg_eax = 0;
	sched_yield();
	return 0;

}


//----------------------------------------------
//lab4 challenge - priority scheduling:


// changes the calling envioremnts priority
//if prio is illegal value then resturns -E_INVAL and doesnt nothing.
//on success returns 0.
static int
sys_set_priority(int prio){
	if (prio >= MAX_PRIO || prio < 0 ) 
		return -E_INVAL;
	curenv->env_prio = prio;
	return 0;
}
//get priority:
static int
sys_get_priority(void){
	return curenv->env_prio;
}

//------------------------------------------------
//lab 5 challenge - exec systemcall:

static int sys_exec(unsigned char* binary, uint32_t stack_ptr) {

	uint32_t start, end, tmp_addr = EXEC_TEMP;
	struct Elf *elf = (struct Elf*) binary;
	struct Proghdr *ph = (struct Proghdr*) (binary + elf->e_phoff);
	int i, perm;
	struct PageInfo *p;

	//Updateds the new env's binary entry point and stack pointer:
	//Must be done at the begining of code before we write to the stack.
	curenv->env_tf.tf_eip = elf->e_entry;
	curenv->env_tf.tf_esp = stack_ptr;

	// Move Binary into the curenv, similar to spawn + map_segment.
	for (i = 0; i < elf->e_phnum; i++, ph++) {
		if (ph->p_type != ELF_PROG_LOAD)
			continue;
		perm = PTE_P | PTE_U;
		if (ph->p_flags & ELF_PROG_FLAG_WRITE)
			perm |= PTE_W;
		end = ROUNDUP(ph->p_va + ph->p_memsz, PGSIZE);
		for (start = ROUNDDOWN(ph->p_va, PGSIZE); start != end; tmp_addr += PGSIZE, start +=PGSIZE) {

			if ( (p = page_lookup(curenv->env_pgdir, (void *) tmp_addr, NULL)) == NULL)
				panic("sys_exec - page_lookup failed! ");

			if (page_insert(curenv->env_pgdir, p, (void *) start, perm) < 0)
				panic("sys_exec - page_insert failed");

			page_remove(curenv->env_pgdir, (void *) tmp_addr);
		}
	}
	

	//Setting a new stack for the new env to use:
	if ( (p = page_lookup(curenv->env_pgdir, (void *) tmp_addr, NULL)) == NULL)
		panic("sys_exec - page_lookup failed (for stack)! ");
	if (page_insert(curenv->env_pgdir, p, (void *) (USTACKTOP - PGSIZE), PTE_P | PTE_U | PTE_W) < 0)
		panic("sys_exec - page_insert failed (inserting a new stack)");
	page_remove(curenv->env_pgdir, (void *) tmp_addr);

	//All set, we call env_run on this env to starting running from the entry point given:
	env_run(curenv);


	//shouldn't get here:
	return 0;
}


// Return the current time.
static int
sys_time_msec(void)
{
	// LAB 6: Your code here.
	return time_msec();
}


//----------------------------------------------
// LAB 6 systemcalls:
//---------------------------------------------

//send packet through e1000 driver
// returns 0 on success
// returns -E_IPC_NOT_RECV if failed and needs to resend packet.
// returns -E_INVAL if parameters are invalid.
static int
sys_send_packet(void *buffer, int size)
{
	user_mem_assert(curenv, buffer, size , PTE_W|PTE_P);
	if (!buffer || size > BUFFER_SIZE)
		return -E_INVAL;
	int res = transmit_packet(buffer,size);
	while ( res < 0){
		curenv->env_status = ENV_NOT_RUNNABLE;
		curenv->env_e1000_trans = true;
		curenv->env_tf.tf_regs.reg_eax = 0;
		sched_yield();
		//woke up - try again:
		res = transmit_packet(buffer,size);
	}

	curenv->env_e1000_trans = false;

	return 0;
}

//container must be of at least BUFFER_SIZE 
//size will receive the incoming packet size.
//return 0 on success
// returns -E_INVAL if parameters are invalid. 
static int
sys_receive_packet(void *container, int* size)
{
	user_mem_assert(curenv, container, BUFFER_SIZE , PTE_P);
	if (!container)
		return -E_INVAL;
	int res = receive_packet (container, size);
	
	if(res == 0 ){
		curenv->env_e1000_rec = false;
		return 0;
	}else{
		curenv->env_status = ENV_NOT_RUNNABLE;
		curenv->env_e1000_rec = true;
		curenv->env_tf.tf_regs.reg_eax = res;
		sched_yield();
	}

	return 0;
}


static int
sys_get_mac_addr(void* mac_addr){
	user_mem_assert(curenv, mac_addr, 12, PTE_W);
	send_mac(mac_addr);
	return 0;
}


//*** ZERO COPY RECEIVE - lab6 challenge: **//
static int
sys_zero_receive(char** package){
	//this handled inside e1000 driver.
	int res = zero_receive(package);
	if ( res < 0 ){
		curenv->env_status = ENV_NOT_RUNNABLE;
		curenv->env_e1000_rec = true;
		curenv->env_tf.tf_regs.reg_eax = res;
		sys_yield();//wake up to try again.
	}
	//succeeded, returns res = size of packet.
	curenv->env_e1000_rec = false;
	return res;	
	
}

//*****************************************************************
//	challenge lab6* added IP filtering syscalls  
//*****************************************************************

//sends parameters of an incoming packet into the firewall filter
// it will return 1-true - when the packet is premitted.
// it will return 0-false - when package should be dropped.
// the called function will handle warnings and console prints.
static int
sys_ip_filter(uint32_t src_ip, uint32_t dst_ip, int protocol){
	return check_packet(src_ip, dst_ip, protocol);
}














// Dispatches to the correct kernel function, passing the arguments.
int32_t
syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
{
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch (syscallno) {
	case SYS_cputs:
		sys_cputs((const char *)a1, (size_t)a2);
		return 0;
	case SYS_cgetc:
		return sys_cgetc();
	case SYS_getenvid:
		return sys_getenvid();
	case SYS_env_destroy:
		return sys_env_destroy((envid_t)a1);
	case SYS_yield:
		sys_yield();
		return 0;
	case SYS_exofork:
      		return sys_exofork();
 	case SYS_env_set_status:
   		return sys_env_set_status((envid_t)a1, (int)a2);
 	case SYS_page_alloc:
      		return sys_page_alloc((envid_t)a1, (void*)a2, (int) a3);
   	case SYS_page_map:
       		return sys_page_map((envid_t)a1, (void*)a2, (envid_t)a3, (void*)a4, (int)a5);
   	case SYS_page_unmap:
     		return sys_page_unmap((envid_t)a1, (void*)a2);
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall((envid_t)a1, (void*)a2);
	case SYS_ipc_recv:
		return sys_ipc_recv((void *)a1);
	case SYS_ipc_try_send:
		return sys_ipc_try_send((envid_t) a1, a2, (void *)a3, a4);
	case SYS_set_priority:
		return sys_set_priority((int)a1);
	case SYS_get_priority:
		return sys_get_priority();
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe((envid_t) a1, (void*)a2);
	case SYS_exec://lab 5 challenge - was very hard :(
		return sys_exec((unsigned char*)a1,a2);
	case SYS_time_msec:
		return sys_time_msec();
	case SYS_send_packet:
		return sys_send_packet((void *)a1, (int)a2);
	case SYS_receive_packet:
		return sys_receive_packet((void *)a1, (int*)a2);
	case SYS_get_mac_addr:
		return sys_get_mac_addr((void *)a1);
	case SYS_zero_receive:
		return sys_zero_receive((char**) a1);
	case SYS_ip_filter:
		return sys_ip_filter((uint32_t) a1, (uint32_t) a2, (int) a3);
	default:
		return -E_INVAL;
	}
}

